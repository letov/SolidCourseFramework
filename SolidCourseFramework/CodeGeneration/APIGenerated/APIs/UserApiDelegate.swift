import Vapor
// UserApiDelegate.swift
//
// Generated by vapor-server-codegen
// https://github.com/thecheatah/SwiftVapor-swagger-codegen
// Template Input: /APIs.User


public enum userDeleteIdDeleteResponse: ResponseEncodable {
  case http200
  case http400

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200:
      let response = Response()
      response.status = HTTPStatus(statusCode: 200)
      return request.eventLoop.makeSucceededFuture(response)
    case .http400:
      let response = Response()
      response.status = HTTPStatus(statusCode: 400)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum userGetIdGetResponse: ResponseEncodable {
  case http200(UserAPIModel)
  case http400

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http400:
      let response = Response()
      response.status = HTTPStatus(statusCode: 400)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum userLoginPostResponse: ResponseEncodable {
  case http200(JwtTokenAPIModel)
  case http400

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http400:
      let response = Response()
      response.status = HTTPStatus(statusCode: 400)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum userLogoutGetResponse: ResponseEncodable {
  case http200
  case http400

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200:
      let response = Response()
      response.status = HTTPStatus(statusCode: 200)
      return request.eventLoop.makeSucceededFuture(response)
    case .http400:
      let response = Response()
      response.status = HTTPStatus(statusCode: 400)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}


public enum userRegisterPostResponse: ResponseEncodable {
  case http200(UserAPIModel)
  case http400

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http400:
      let response = Response()
      response.status = HTTPStatus(statusCode: 400)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}

public protocol UserApiDelegate {
  associatedtype AuthType
  /**
  DELETE /user/delete/{id} */
  func userDeleteIdDelete(with req: Request, asAuthenticated user: AuthType, id: Int64) throws -> EventLoopFuture<userDeleteIdDeleteResponse>
  /**
  GET /user/get/{id} */
  func userGetIdGet(with req: Request, asAuthenticated user: AuthType, id: Int64) throws -> EventLoopFuture<userGetIdGetResponse>
  /**
  POST /user/login */
  func userLoginPost(with req: Request, body: UserAPIModel) throws -> EventLoopFuture<userLoginPostResponse>
  /**
  GET /user/logout */
  func userLogoutGet(with req: Request) throws -> EventLoopFuture<userLogoutGetResponse>
  /**
  POST /user/register */
  func userRegisterPost(with req: Request, body: UserAPIModel) throws -> EventLoopFuture<userRegisterPostResponse>
}
