import Vapor
// GameApiDelegate.swift
//
// Generated by vapor-server-codegen
// https://github.com/thecheatah/SwiftVapor-swagger-codegen
// Template Input: /APIs.Game


public enum gameCapabilitiesGetResponse: ResponseEncodable {
  case http200(Capabilities)

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    }
  }
}


public enum gameNewGetResponse: ResponseEncodable {
  case http200(Game)
  case http400

  public func encodeResponse(for request: Request) -> EventLoopFuture<Response> {
    switch self {
    case .http200(let content):
      return content.encodeResponse(for: request).map { (response: Response) -> (Response) in
        response.status = HTTPStatus(statusCode: 200)
        return response
      }
    case .http400:
      let response = Response()
      response.status = HTTPStatus(statusCode: 400)
      return request.eventLoop.makeSucceededFuture(response)
    }
  }
}

public protocol GameApiDelegate {
  associatedtype AuthType
  /**
  GET /game/capabilities */
  func gameCapabilitiesGet(with req: Request) throws -> EventLoopFuture<gameCapabilitiesGetResponse>
  /**
  GET /game/new */
  func gameNewGet(with req: Request) throws -> EventLoopFuture<gameNewGetResponse>
}
