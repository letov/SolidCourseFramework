import Vapor
import RoutingKit

// routes.swift
//
// Generated by vapor-server-codegen
// https://github.com/thecheatah/SwiftVapor-swagger-codegen
// Template Input: 

extension String {
  var asPathComponents: [PathComponent] {
    return self.split(separator: "/").map {
      if $0.starts(with: "{") && $0.hasSuffix("}") {
        let start = $0.index($0.startIndex, offsetBy: 1)
        let end = $0.index($0.endIndex, offsetBy: -1)
        return PathComponent.parameter(String($0[start..<end]))
      } else {
        return PathComponent.constant(.init($0))
      }
    }
  }
}

public protocol AuthenticationMiddleware: Middleware {
  associatedtype AuthType: Authenticatable
  func authType() -> AuthType.Type
}

//Used when auth is not used
public class DummyAuthType: Authenticatable {}

public func routes<game: GameApiDelegate, hello: HelloApiDelegate, user: UserApiDelegate>
  (_ app: RoutesBuilder, game: game, hello: hello, user: user)
  throws
  where game.AuthType == DummyAuthType.Type, hello.AuthType == DummyAuthType.Type, user.AuthType == DummyAuthType.Type
  {
  //for game
  app.on(.GET, "/game/capabilities".asPathComponents) { (request: Request) -> EventLoopFuture<gameCapabilitiesGetResponse> in
    return try game.gameCapabilitiesGet(with: request)
  }
  app.on(.GET, "/game/new".asPathComponents) { (request: Request) -> EventLoopFuture<gameNewGetResponse> in
    return try game.gameNewGet(with: request)
  }
  //for hello
  app.on(.GET, "/hello".asPathComponents) { (request: Request) -> EventLoopFuture<helloGetResponse> in
    return try hello.helloGet(with: request)
  }
  //for user
  app.on(.POST, "/user/register".asPathComponents) { (request: Request) -> EventLoopFuture<userRegisterPostResponse> in
    let body = try request.content.decode(Body.self)
    return try user.userRegisterPost(with: request, body: body)
  }
}

